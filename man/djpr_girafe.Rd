% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/djpr_ggiraph.R
\name{djpr_girafe}
\alias{djpr_girafe}
\alias{ggiraph_js}
\title{Ensure ggiraph object resizes with browser window}
\source{
https://stackoverflow.com/questions/65267602/can-a-ggiraph-interactive-plot-be-the-size-of-the-window-in-r-shiny
and https://stackoverflow.com/questions/45191999/ggiraph-plot-doesnt-resize-to-fit-the-page and
https://stackoverflow.com/questions/36995142/get-the-size-of-the-window-in-shiny
}
\usage{
djpr_girafe(ggobj, input, height_cf_width = 0.6, ...)

ggiraph_js()
}
\arguments{
\item{ggobj}{A ggplot2 object}

\item{input}{The Shiny input object; specify \code{input = input} as in the
example.}

\item{height_cf_width}{Numeric. How high should the container for your plot be,
relative to its width? A value of \code{0.5} means the plot will be half as tall
as it is wide. A value of \code{1} means your plot will be square.}
}
\description{
As a Shiny window  (html container) is resized,
ggplot2 objects (rendered using plotOutput())
change their widths while retaining their height. By default,
ggiraph::girafeOutput() objects don't resize in the same way. This code,
when added to a \code{fluidPage()} or similar, makes the browser width and
height available so that the ggiraph object can scale correctly.
}
\details{
\code{djpr_girafe()} should be used within \code{renderGirafe({})}, in place of
\code{ggiraph::girafe()}, within the \code{server} component of a Shiny app.

\code{ggiraph_js()} should be called within the Shiny UI, as in
\code{fluidPage(ggiraph_js())}.
}
\examples{
\dontrun{
library(shiny)
library(ggiraph)
library(ggplot2)

ui <- fluidPage(
  ggiraph_js(),
  fluidRow(
    "This is a ggplot2 object",
    plotOutput("plot1",
      width = "100\%"
    ),
    "This is a ggiraph object",
    girafeOutput("plot2",
      width = "100\%",
      height = "400px"
    ),
    "Blergh"
  )
)

server <- function(input, output, session) {
  output$plot1 <- renderPlot({
    ggplot(mtcars, aes(x = wt, y = mpg)) +
      geom_point()
  })

  output$plot2 <- renderGirafe({
    p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
      geom_point_interactive(aes(tooltip = cyl))


    djpr_girafe(p, input = input)
  })
}

shinyApp(ui, server)
}
}
\keyword{internal}
